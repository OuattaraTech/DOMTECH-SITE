// CHATBOT INTELLIGENT AUTONOME DOMTECH
// Syst√®me d'IA conversationnelle avanc√© avec M√âMOIRE PERSISTANTE

let chatbotOpen = false;
let currentClientId = null;
let conversationContext = {
    stage: 'greeting',
    userInfo: {},
    serviceInterest: null,
    lastIntent: null,
    conversationHistory: [],
    userPreferences: {},
    leadScore: 0,
    sessionStartTime: Date.now(),
    returningClient: false
};

// SYST√àME DE M√âMOIRE PERSISTANTE
class ClientMemorySystem {
    constructor() {
        this.storageKey = 'domtech_client_memories';
        this.maxMemoryDays = 30; // Garde les conversations 30 jours
        this.maxConversationsPerClient = 10; // Max 10 conversations par client
    }

    // G√©n√®re un ID unique pour chaque client bas√© sur le navigateur
    generateClientId() {
        let clientId = localStorage.getItem('domtech_client_id');
        
        if (!clientId) {
            // Cr√©ation d'un ID unique bas√© sur plusieurs facteurs
            const timestamp = Date.now();
            const random = Math.random().toString(36).substr(2, 9);
            const userAgent = navigator.userAgent.slice(-10);
            const screenRes = `${screen.width}x${screen.height}`;
            
            clientId = `domtech_${timestamp}_${random}_${btoa(userAgent + screenRes).slice(0, 8)}`;
            localStorage.setItem('domtech_client_id', clientId);
        }
        
        return clientId;
    }

    // Sauvegarde la conversation compl√®te
    saveConversation(clientId, conversationData) {
        try {
            const memories = this.getAllMemories();
            
            if (!memories[clientId]) {
                memories[clientId] = {
                    firstVisit: Date.now(),
                    totalConversations: 0,
                    totalLeadScore: 0,
                    preferredServices: [],
                    conversations: []
                };
            }

            const clientMemory = memories[clientId];
            
            // Ajouter la nouvelle conversation
            const conversationSummary = {
                id: `conv_${Date.now()}`,
                timestamp: Date.now(),
                duration: Date.now() - conversationData.sessionStartTime,
                messageCount: conversationData.conversationHistory.length,
                leadScore: conversationData.leadScore,
                serviceInterest: conversationData.serviceInterest,
                lastIntent: conversationData.lastIntent,
                stage: conversationData.stage,
                keyTopics: this.extractKeyTopics(conversationData.conversationHistory),
                clientInfo: conversationData.userInfo,
                urgencyDetected: conversationData.conversationHistory.some(msg => 
                    msg.analysis && msg.analysis.urgencyLevel > 0
                ),
                summary: this.generateConversationSummary(conversationData)
            };

            clientMemory.conversations.unshift(conversationSummary);
            clientMemory.totalConversations++;
            clientMemory.totalLeadScore += conversationData.leadScore;
            
            // Mise √† jour des services pr√©f√©r√©s
            if (conversationData.serviceInterest) {
                const serviceIndex = clientMemory.preferredServices.findIndex(s => s.service === conversationData.serviceInterest);
                if (serviceIndex >= 0) {
                    clientMemory.preferredServices[serviceIndex].count++;
                } else {
                    clientMemory.preferredServices.push({
                        service: conversationData.serviceInterest,
                        count: 1,
                        lastMentioned: Date.now()
                    });
                }
            }

            // Limiter le nombre de conversations stock√©es
            if (clientMemory.conversations.length > this.maxConversationsPerClient) {
                clientMemory.conversations = clientMemory.conversations.slice(0, this.maxConversationsPerClient);
            }

            // Sauvegarder
            localStorage.setItem(this.storageKey, JSON.stringify(memories));
            
            console.log(`üíæ Conversation sauvegard√©e pour client ${clientId}`);
            return true;
        } catch (error) {
            console.error('‚ùå Erreur sauvegarde conversation:', error);
            return false;
        }
    }

    // R√©cup√®re la m√©moire d'un client
    getClientMemory(clientId) {
        try {
            const memories = this.getAllMemories();
            return memories[clientId] || null;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration m√©moire:', error);
            return null;
        }
    }

    // R√©cup√®re toutes les m√©moires
    getAllMemories() {
        try {
            const stored = localStorage.getItem(this.storageKey);
            return stored ? JSON.parse(stored) : {};
        } catch (error) {
            console.error('‚ùå Erreur lecture m√©moires:', error);
            return {};
        }
    }

    // Nettoie les anciennes conversations
    cleanOldMemories() {
        try {
            const memories = this.getAllMemories();
            const cutoffDate = Date.now() - (this.maxMemoryDays * 24 * 60 * 60 * 1000);
            let cleaned = false;

            for (let clientId in memories) {
                const clientMemory = memories[clientId];
                const originalLength = clientMemory.conversations.length;
                
                clientMemory.conversations = clientMemory.conversations.filter(
                    conv => conv.timestamp > cutoffDate
                );

                if (clientMemory.conversations.length !== originalLength) {
                    cleaned = true;
                }

                // Supprimer les clients sans conversations r√©centes
                if (clientMemory.conversations.length === 0 && clientMemory.firstVisit < cutoffDate) {
                    delete memories[clientId];
                    cleaned = true;
                }
            }

            if (cleaned) {
                localStorage.setItem(this.storageKey, JSON.stringify(memories));
                console.log('üßπ Nettoyage des anciennes m√©moires effectu√©');
            }
        } catch (error) {
            console.error('‚ùå Erreur nettoyage m√©moires:', error);
        }
    }

    // Extrait les sujets cl√©s d'une conversation
    extractKeyTopics(conversationHistory) {
        const topics = new Set();
        
        conversationHistory.forEach(msg => {
            if (msg.type === 'user') {
                const words = msg.message.toLowerCase().split(/[\s,!?.-]+/);
                
                // Mots-cl√©s importants
                const keywords = ['prix', 'tarif', 'installation', 'd√©pannage', 'urgence', 'probl√®me', 
                                'clim', 'climatisation', 'frigo', '√©lectricit√©', 'plomberie', 'rendez-vous'];
                
                words.forEach(word => {
                    if (keywords.includes(word) || word.length > 6) {
                        topics.add(word);
                    }
                });
            }
        });

        return Array.from(topics).slice(0, 10); // Max 10 topics
    }

    // G√©n√®re un r√©sum√© de conversation
    generateConversationSummary(conversationData) {
        const { conversationHistory, serviceInterest, leadScore, lastIntent } = conversationData;
        
        let summary = "Conversation ";
        
        if (serviceInterest) {
            summary += `sur ${serviceInterest}. `;
        }
        
        if (leadScore > 20) {
            summary += "Client tr√®s int√©ress√©. ";
        } else if (leadScore > 10) {
            summary += "Client mod√©r√©ment int√©ress√©. ";
        }
        
        if (lastIntent === 'urgency') {
            summary += "URGENCE d√©tect√©e. ";
        } else if (lastIntent === 'appointment') {
            summary += "Demande de RDV. ";
        } else if (lastIntent === 'pricing') {
            summary += "Demande de tarifs. ";
        }

        const userMessages = conversationHistory.filter(msg => msg.type === 'user');
        summary += `${userMessages.length} messages √©chang√©s.`;

        return summary;
    }

    // G√©n√®re un message de bienvenue personnalis√©
    generateWelcomeMessage(clientMemory) {
        if (!clientMemory) {
            return null; // Nouveau client
        }

        const { totalConversations, conversations, preferredServices } = clientMemory;
        const lastConversation = conversations[0];
        
        let welcomeMsg = "üëã Ravi de vous revoir chez DOMTECH !\n\n";
        
        // R√©f√©rence √† la derni√®re conversation
        if (lastConversation) {
            const daysSince = Math.floor((Date.now() - lastConversation.timestamp) / (24 * 60 * 60 * 1000));
            
            if (daysSince === 0) {
                welcomeMsg += "üïê Nous avons parl√© plus t√¥t aujourd'hui";
            } else if (daysSince === 1) {
                welcomeMsg += "üïê Nous avons parl√© hier";
            } else if (daysSince < 7) {
                welcomeMsg += `üïê Nous avons parl√© il y a ${daysSince} jours`;
            } else {
                welcomeMsg += "üïê Cela fait un moment !";
            }
            
            if (lastConversation.serviceInterest) {
                welcomeMsg += ` de ${domtechKnowledge.services[lastConversation.serviceInterest]?.name || lastConversation.serviceInterest}`;
            }
            welcomeMsg += ".\n\n";
        }

        // Service pr√©f√©r√©
        if (preferredServices.length > 0) {
            const topService = preferredServices.sort((a, b) => b.count - a.count)[0];
            const serviceName = domtechKnowledge.services[topService.service]?.name || topService.service;
            welcomeMsg += `üéØ Je vois que vous vous int√©ressez √† ${serviceName}.\n\n`;
        }

        // Urgence pr√©c√©dente
        if (lastConversation && lastConversation.urgencyDetected) {
            welcomeMsg += "üö® J'esp√®re que votre probl√®me urgent a √©t√© r√©solu !\n\n";
        }

        // Statistiques client
        if (totalConversations > 1) {
            welcomeMsg += `üìä C'est notre ${totalConversations}e conversation ensemble.\n\n`;
        }

        welcomeMsg += "üí¨ Comment puis-je vous aider aujourd'hui ?";
        
        return welcomeMsg;
    }

    // R√©cup√®re le contexte de la derni√®re conversation
    getLastConversationContext(clientMemory) {
        if (!clientMemory || clientMemory.conversations.length === 0) {
            return null;
        }

        const lastConv = clientMemory.conversations[0];
        
        return {
            serviceInterest: lastConv.serviceInterest,
            lastIntent: lastConv.lastIntent,
            leadScore: Math.floor(lastConv.leadScore * 0.5), // 50% du score pr√©c√©dent
            keyTopics: lastConv.keyTopics,
            urgencyHistory: lastConv.urgencyDetected,
            clientInfo: lastConv.clientInfo
        };
    }
}

// Instance globale du syst√®me de m√©moire
const memorySystem = new ClientMemorySystem();

// Base de connaissances compl√®te DOMTECH
const domtechKnowledge = {
    services: {
        'climatisation': {
            name: 'Climatisation Split',
            description: 'Installation, entretien et d√©pannage de climatiseurs split',
            prices: { installation: 20000, entretien: 10000, depannage: 15000, 'installation-entretien': 25000 },
            keywords: ['clim', 'climatisation', 'split', 'froid', 'refroidir', 'chaud', 'temp√©rature'],
            commonProblems: ['ne refroidit pas', 'bruit', 'fuite eau', 'ne d√©marre pas'],
            tips: ['Nettoyez les filtres mensuellement', 'Temp√©rature optimale: 24-26¬∞C', '√âvitez les √©carts de temp√©rature']
        },
        'armoire': {
            name: 'Armoire Climatisation',
            description: 'Solutions industrielles pour entreprises et grands espaces',
            prices: { installation: 60000, entretien: 15000, depannage: 25000, 'installation-entretien': 70000 },
            keywords: ['armoire', 'industriel', 'entreprise', 'bureau', 'commercial', 'grande surface'],
            commonProblems: ['surchauffe', 'ventilation insuffisante', 'consommation √©lev√©e'],
            tips: ['Maintenance pr√©ventive trimestrielle', 'V√©rifiez les filtres r√©guli√®rement']
        },
        'refrigeration': {
            name: 'R√©frig√©ration',
            description: 'D√©pannage cong√©lateurs et r√©frig√©rateurs',
            prices: { depannage: 20000, entretien: 12000, installation: 30000 },
            keywords: ['frigo', 'cong√©lateur', 'r√©frig√©rateur', 'conservation', 'froid', 'surg√©lation'],
            commonProblems: ['ne refroidit plus', 'givre excessif', 'bruit anormal', 'fuite'],
            tips: ['D√©givrage r√©gulier', 'Ne surchargez pas', 'V√©rifiez les joints']
        },
        'electricite': {
            name: '√âlectricit√© B√¢timent',
            description: 'Installation √©lectrique et mise aux normes',
            prices: { installation: 40000, depannage: 18000, 'mise-aux-normes': 50000 },
            keywords: ['√©lectricit√©', '√©lectrique', 'installation', 'panne', 'courant', 'disjoncteur'],
            commonProblems: ['coupure courant', 'court-circuit', 'surcharge', 'prises d√©faillantes'],
            tips: ['V√©rifiez vos disjoncteurs', 'Ne surchargez pas les prises', 'Faites v√©rifier annuellement']
        },
        'plomberie': {
            name: 'Plomberie & Gazini√®re',
            description: 'Plomberie g√©n√©rale et raccordement gaz',
            prices: { installation: 35000, depannage: 20000, raccordement: 25000 },
            keywords: ['plomberie', 'eau', 'fuite', 'gazini√®re', 'gaz', 'tuyau', 'robinet'],
            commonProblems: ['fuite eau', 'pression faible', 'odeur gaz', 'robinet cass√©'],
            tips: ['Coupez l\'eau en cas de fuite', 'V√©rifiez les joints', 'D√©tecteur de gaz recommand√©']
        }
    },
    
    intents: {
        greeting: ['bonjour', 'salut', 'hello', 'bonsoir', 'hey', 'coucou'],
        pricing: ['prix', 'tarif', 'co√ªt', 'combien', 'cher', 'devis', 'budget'],
        services: ['service', 'que faites', 'sp√©cialit√©', 'domaine', 'proposez'],
        contact: ['contact', 't√©l√©phone', 'appeler', 'joindre', 'num√©ro', 'email'],
        hours: ['horaire', 'ouvert', 'ferm√©', 'heure', 'quand', 'disponible'],
        location: ['o√π', 'adresse', 'localisation', 'situ√©', 'zone', 'quartier'],
        urgency: ['urgent', 'urgence', 'rapide', 'vite', 'maintenant', 'imm√©diat'],
        appointment: ['rendez-vous', 'rdv', 'rencontrer', 'venir', 'planifier'],
        problem: ['probl√®me', 'panne', 'marche pas', 'cass√©', 'd√©faut', 'dysfonction'],
        quality: ['qualit√©', 'garantie', 'professionnel', 'exp√©rience', 'comp√©tent'],
        comparison: ['concurrent', 'diff√©rence', 'pourquoi', 'avantage', 'mieux']
    },

    responses: {
        greeting: [
            "Bonjour ! Je suis l'assistant virtuel de DOMTECH üîß\nSp√©cialiste du froid et de la climatisation depuis 5 ans !",
            "Salut ! Ravi de vous accueillir chez DOMTECH !\nüåü Comment puis-je vous aider aujourd'hui ?",
            "Bonjour ! Amadou et l'√©quipe DOMTECH sont √† votre service !"
        ],
        services_general: [
            "üîß DOMTECH propose 5 services d'excellence :\n\n‚Ä¢ ‚ùÑÔ∏è Climatisation Split\n‚Ä¢ üè¢ Armoires Climatisation\n‚Ä¢ üßä R√©frig√©ration\n‚Ä¢ ‚ö° √âlectricit√© B√¢timent\n‚Ä¢ üîß Plomberie & Gazini√®re\n\nQuel service vous int√©resse le plus ?",
            "Nous sommes LES sp√©cialistes du froid, de la climatisation et de l'√©nergie √† Abidjan !\n\nüèÜ Plus de 500 clients satisfaits\n‚≠ê 5 ans d'exp√©rience\nüöÄ Service 24/7\n\nQuel est votre besoin pr√©cis ?"
        ],
        contact_info: [
            "üìû Contactez DOMTECH :\n\n‚Ä¢ üî• URGENCES 24/7 : 07 10 36 76 02\n‚Ä¢ üì± Standard : 05 05 95 70 61\n‚Ä¢ üìß Email : infodomtech225@gmail.com\n\nüí¨ Voulez-vous que je vous connecte directement via WhatsApp ?",
            "üöÄ DOMTECH √† votre service !\n\nüìû 07 10 36 76 02 (Amadou - Fondateur)\nüìû 05 05 95 70 61 (√âquipe technique)\n\n‚ö° R√©ponse garantie sous 30 minutes !"
        ],
        hours: [
            "üïê Horaires DOMTECH :\n\nüìÖ Lundi-Vendredi : 8h00-18h00\nüìÖ Samedi : 9h00-13h00\nüö® URGENCES : 24h/24 - 7j/7\n\n‚è∞ Besoin d'une intervention maintenant ?"
        ],
        location: [
            "üìç DOMTECH intervient dans TOUT Abidjan :\n\nüèôÔ∏è Zones couvertes :\n‚Ä¢ Cocody ‚Ä¢ Plateau ‚Ä¢ Marcory\n‚Ä¢ Yopougon ‚Ä¢ Adjam√© ‚Ä¢ Treichville\n‚Ä¢ Koumassi ‚Ä¢ Port-Bou√´t ‚Ä¢ Abobo\n\nüöó D√©placement gratuit pour devis !\nDans quel quartier √™tes-vous ?"
        ],
        quality_assurance: [
            "üèÜ Pourquoi choisir DOMTECH ?\n\n‚úÖ 5+ ann√©es d'exp√©rience\n‚úÖ 500+ clients satisfaits\n‚úÖ Techniciens certifi√©s\n‚úÖ Garantie sur tous travaux\n‚úÖ Pi√®ces d'origine uniquement\n‚úÖ Devis gratuit\n‚úÖ Service apr√®s-vente\n\n‚≠ê Note moyenne : 5/5 √©toiles"
        ]
    },

    // Patterns de conversation avanc√©s
    conversationPatterns: {
        leadQualification: [
            "Pour mieux vous conseiller, puis-je conna√Ætre :",
            "‚Ä¢ Type de logement/local ?",
            "‚Ä¢ Surface approximative ?",
            "‚Ä¢ Budget envisag√© ?"
        ],
        urgencyDetection: [
            "üö® URGENCE D√âTECT√âE !",
            "Situation critique identifi√©e.",
            "Intervention imm√©diate n√©cessaire."
        ],
        satisfactionCheck: [
            "Mes r√©ponses vous aident-elles ?",
            "Avez-vous d'autres questions ?",
            "Souhaitez-vous parler √† un technicien ?"
        ]
    }
};

// Syst√®me de scoring des prospects
const leadScoringSystem = {
    updateScore: (action, value = 1) => {
        conversationContext.leadScore += value;
        
        // Actions qui augmentent le score
        const scoringActions = {
            'ask_price': 10,
            'ask_appointment': 15,
            'show_urgency': 20,
            'provide_details': 5,
            'ask_multiple_services': 8,
            'mention_budget': 12
        };
        
        if (scoringActions[action]) {
            conversationContext.leadScore += scoringActions[action];
        }
    },
    
    getLeadLevel: () => {
        const score = conversationContext.leadScore;
        if (score >= 30) return 'hot';
        if (score >= 15) return 'warm';
        return 'cold';
    }
};

// Traitement du langage naturel avanc√©
function analyzeMessage(message) {
    const words = message.toLowerCase().split(/[\s,!?.-]+/);
    let detectedIntents = [];
    let detectedServices = [];
    let urgencyLevel = 0;
    let sentiment = 'neutral';
    
    // D√©tection multi-intentions
    for (let intent in domtechKnowledge.intents) {
        const keywords = domtechKnowledge.intents[intent];
        const matches = words.filter(word => 
            keywords.some(keyword => 
                word.includes(keyword) || 
                keyword.includes(word) ||
                levenshteinDistance(word, keyword) <= 2
            )
        );
        
        if (matches.length > 0) {
            detectedIntents.push({intent, confidence: matches.length});
        }
    }
    
    // D√©tection de services multiples
    for (let service in domtechKnowledge.services) {
        const keywords = domtechKnowledge.services[service].keywords;
        const matches = words.filter(word => 
            keywords.some(keyword => 
                word.includes(keyword) || 
                keyword.includes(word)
            )
        );
        
        if (matches.length > 0) {
            detectedServices.push({service, confidence: matches.length});
        }
    }
    
    // D√©tection d'urgence
    const urgencyWords = ['urgent', 'vite', 'maintenant', 'imm√©diat', 'rapide', 'aujourd\'hui'];
    urgencyLevel = words.filter(word => urgencyWords.includes(word)).length;
    
    // Analyse de sentiment basique
    const positiveWords = ['bien', 'bon', 'excellent', 'parfait', 'merci', 'super'];
    const negativeWords = ['probl√®me', 'panne', 'cass√©', 'mauvais', 'nul', 'cher'];
    
    const positiveCount = words.filter(word => positiveWords.includes(word)).length;
    const negativeCount = words.filter(word => negativeWords.includes(word)).length;
    
    if (positiveCount > negativeCount) sentiment = 'positive';
    else if (negativeCount > positiveCount) sentiment = 'negative';
    
    // Tri par confiance
    detectedIntents.sort((a, b) => b.confidence - a.confidence);
    detectedServices.sort((a, b) => b.confidence - a.confidence);
    
    return {
        intents: detectedIntents,
        services: detectedServices,
        urgencyLevel,
        sentiment,
        originalMessage: message
    };
}

// Distance de Levenshtein pour la similarit√© des mots
function levenshteinDistance(str1, str2) {
    const matrix = [];
    
    for (let i = 0; i <= str2.length; i++) {
        matrix[i] = [i];
    }
    
    for (let j = 0; j <= str1.length; j++) {
        matrix[0][j] = j;
    }
    
    for (let i = 1; i <= str2.length; i++) {
        for (let j = 1; j <= str1.length; j++) {
            if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1,
                    matrix[i][j - 1] + 1,
                    matrix[i - 1][j] + 1
                );
            }
        }
    }
    
    return matrix[str2.length][str1.length];
}

// G√©n√©rateur de r√©ponses intelligentes avec contexte
function generateIntelligentResponse(userMessage, analysis) {
    const { intents, services, urgencyLevel, sentiment } = analysis;
    let response = "";
    let actions = [];
    let followUpQuestions = [];
    
    // Mise √† jour du contexte et scoring
    if (services.length > 0) {
        conversationContext.serviceInterest = services[0].service;
        leadScoringSystem.updateScore('ask_service', services.length * 2);
    }
    
    if (intents.length > 0) {
        conversationContext.lastIntent = intents[0].intent;
    }
    
    // Gestion de l'urgence
    if (urgencyLevel > 0) {
        leadScoringSystem.updateScore('show_urgency', urgencyLevel * 5);
        response = "üö® URGENCE D√âTECT√âE !\n\n";
        response += "Pour une intervention d'urgence IMM√âDIATE :\n";
        response += "üìû Appelez MAINTENANT : 07 10 36 76 02\n";
        response += "‚ö° Amadou ou un technicien vous r√©pond\n";
        response += "üöó Intervention sous 30 minutes √† Abidjan\n\n";
        actions.push('urgent_call_button', 'urgent_whatsapp_button');
        
        if (services.length > 0) {
            const service = domtechKnowledge.services[services[0].service];
            response += `üí∞ D√©pannage ${service.name} : ${service.prices.depannage?.toLocaleString() || 'Sur devis'} FCFA\n`;
            response += "üí≥ Paiement apr√®s intervention\n";
        }
        
        return { response, actions, followUpQuestions };
    }
    
    // Traitement des intentions principales
    const primaryIntent = intents[0]?.intent;
    const primaryService = services[0]?.service;
    
    switch (primaryIntent) {
        case 'greeting':
            response = getRandomResponse(domtechKnowledge.responses.greeting);
            response += "\n\nüéØ Je peux vous aider avec :\n";
            response += "‚Ä¢ üí∞ Devis instantan√©s\n‚Ä¢ üîß Conseils techniques\n‚Ä¢ üìÖ Prise de rendez-vous\n‚Ä¢ üö® Urgences 24/7\n\n";
            response += "Quel est votre projet ?";
            conversationContext.stage = 'service_inquiry';
            break;
            
        case 'services':
            if (primaryService) {
                response = generateServiceResponse(primaryService);
                actions.push('quote_button', 'whatsapp_button');
                followUpQuestions = [
                    "Quelle est la surface √† climatiser ?",
                    "Avez-vous d√©j√† un √©quipement ?",
                    "Quel est votre budget ?"
                ];
            } else {
                response = getRandomResponse(domtechKnowledge.responses.services_general);
            }
            break;
            
        case 'pricing':
            leadScoringSystem.updateScore('ask_price');
            if (primaryService) {
                response = generatePricingResponse(primaryService);
                actions.push('calculator_button', 'quote_button');
            } else {
                response = generateGeneralPricingResponse();
                actions.push('calculator_button');
            }
            break;
            
        case 'contact':
            response = getRandomResponse(domtechKnowledge.responses.contact_info);
            actions.push('whatsapp_button', 'call_button');
            break;
            
        case 'hours':
            response = getRandomResponse(domtechKnowledge.responses.hours);
            if (isOutsideBusinessHours()) {
                response += "\n\n‚è∞ Nous sommes actuellement ferm√©s, mais :\n";
                response += "‚Ä¢ üì± WhatsApp disponible 24/7\n";
                response += "‚Ä¢ üö® Urgences : appelez quand m√™me !";
                actions.push('whatsapp_button');
            }
            break;
            
        case 'location':
            response = getRandomResponse(domtechKnowledge.responses.location);
            followUpQuestions = ["Dans quel quartier √™tes-vous ?"];
            break;
            
        case 'problem':
            response = generateProblemDiagnosisResponse(primaryService, userMessage);
            actions.push('urgent_call_button', 'whatsapp_button');
            conversationContext.stage = 'problem_diagnosis';
            break;
            
        case 'appointment':
            leadScoringSystem.updateScore('ask_appointment');
            response = generateAppointmentResponse();
            actions.push('whatsapp_button', 'call_button');
            break;
            
        case 'quality':
            response = getRandomResponse(domtechKnowledge.responses.quality_assurance);
            response += "\n\nüìã T√©moignages r√©cents :\n";
            response += "‚≠ê \"Service exceptionnel !\" - Marie K. (Cocody)\n";
            response += "‚≠ê \"Tr√®s professionnel\" - Jean B. (Marcory)\n";
            response += "‚≠ê \"Intervention rapide\" - Fatou K. (Yopougon)";
            break;
            
        default:
            response = generateContextualResponse(userMessage, analysis);
            break;
    }
    
    // Ajout de questions de suivi intelligentes
    if (followUpQuestions.length === 0) {
        followUpQuestions = generateSmartFollowUp(analysis);
    }
    
    // Personnalisation selon le sentiment
    if (sentiment === 'negative') {
        response = "üòî Je comprends votre frustration.\n\n" + response;
        response += "\n\nüí™ DOMTECH va r√©soudre votre probl√®me rapidement !";
    } else if (sentiment === 'positive') {
        response += "\n\nüòä Ravi de votre confiance en DOMTECH !";
    }
    
    return { response, actions, followUpQuestions };
}

// Fonctions de g√©n√©ration sp√©cialis√©es
function generateServiceResponse(serviceKey) {
    const service = domtechKnowledge.services[serviceKey];
    let response = `üîß ${service.name}\n\n`;
    response += `üìã ${service.description}\n\n`;
    response += `üí∞ Nos tarifs :\n`;
    
    for (let [type, price] of Object.entries(service.prices)) {
        const displayType = type.replace('-', ' + ').replace(/^\w/, c => c.toUpperCase());
        response += `‚Ä¢ ${displayType} : ${price.toLocaleString()} FCFA\n`;
    }
    
    response += `\nüí° Conseils DOMTECH :\n`;
    service.tips.forEach(tip => {
        response += `‚Ä¢ ${tip}\n`;
    });
    
    response += `\nüîç Probl√®mes courants que nous r√©solvons :\n`;
    service.commonProblems.forEach(problem => {
        response += `‚Ä¢ ${problem}\n`;
    });
    
    response += "\nüìû Besoin d'un devis personnalis√© ?";
    
    return response;
}

function generatePricingResponse(serviceKey) {
    const service = domtechKnowledge.services[serviceKey];
    let response = `üí∞ Tarifs ${service.name} :\n\n`;
    
    for (let [type, price] of Object.entries(service.prices)) {
        const displayType = type.replace('-', ' + ').replace(/^\w/, c => c.toUpperCase());
        response += `üí≥ ${displayType} : ${price.toLocaleString()} FCFA\n`;
    }
    
    response += `\nüéÅ INCLUS dans nos prix :\n`;
    response += `‚Ä¢ D√©placement gratuit\n‚Ä¢ Diagnostic complet\n‚Ä¢ Garantie travaux\n‚Ä¢ Conseils personnalis√©s\n`;
    response += `\nüìä Utilisez notre calculateur pour un devis pr√©cis selon votre surface !`;
    
    return response;
}

function generateGeneralPricingResponse() {
    let response = "üí∞ Aper√ßu de nos tarifs DOMTECH :\n\n";
    
    for (let [key, service] of Object.entries(domtechKnowledge.services)) {
        const minPrice = Math.min(...Object.values(service.prices));
        response += `${service.name} : √† partir de ${minPrice.toLocaleString()} FCFA\n`;
    }
    
    response += "\nüéØ Tarifs adapt√©s selon :\n";
    response += "‚Ä¢ Surface √† traiter\n‚Ä¢ Complexit√© de l'installation\n‚Ä¢ Urgence de l'intervention\n";
    response += "\nüìä Calculateur de devis disponible pour estimation pr√©cise !";
    
    return response;
}

function generateProblemDiagnosisResponse(serviceKey, userMessage) {
    let response = "üîç DIAGNOSTIC DOMTECH en cours...\n\n";
    
    if (serviceKey) {
        const service = domtechKnowledge.services[serviceKey];
        response += `üîß Probl√®me ${service.name} d√©tect√© :\n\n`;
        
        // Analyse des mots-cl√©s pour diagnostic
        const problemKeywords = {
            'ne marche pas': 'V√©rifiez l\'alimentation √©lectrique',
            'bruit': 'Probl√®me m√©canique possible',
            'fuite': '√âtanch√©it√© √† contr√¥ler',
            'chaud': 'Syst√®me de refroidissement d√©faillant',
            'froid': 'Thermostat ou gaz r√©frig√©rant'
        };
        
        let diagnosisFound = false;
        for (let [keyword, diagnosis] of Object.entries(problemKeywords)) {
            if (userMessage.toLowerCase().includes(keyword)) {
                response += `üí° Diagnostic pr√©liminaire : ${diagnosis}\n`;
                diagnosisFound = true;
                break;
            }
        }
        
        if (!diagnosisFound) {
            response += `üí° Diagnostic n√©cessaire sur site\n`;
        }
        
        response += `\n‚ö° Solutions DOMTECH :\n`;
        response += `‚Ä¢ Intervention sous 2h\n`;
        response += `‚Ä¢ Diagnostic gratuit\n`;
        response += `‚Ä¢ R√©paration imm√©diate si possible\n`;
        response += `‚Ä¢ Pi√®ces d'origine disponibles\n\n`;
        response += `üí∞ D√©pannage : ${service.prices.depannage?.toLocaleString() || 'Sur devis'} FCFA`;
    } else {
        response += "Pour un diagnostic pr√©cis, j'ai besoin de savoir :\n";
        response += "‚Ä¢ Quel √©quipement ? (clim, frigo, etc.)\n";
        response += "‚Ä¢ Quels sympt√¥mes exactement ?\n";
        response += "‚Ä¢ Depuis quand ?\n";
        response += "‚Ä¢ Marque et mod√®le si possible";
    }
    
    response += "\n\nüö® Intervention urgente disponible 24/7 !";
    return response;
}

function generateAppointmentResponse() {
    let response = "üìÖ PRISE DE RENDEZ-VOUS DOMTECH\n\n";
    response += "üïê Cr√©neaux disponibles :\n";
    response += "‚Ä¢ Matin : 8h00-12h00\n";
    response += "‚Ä¢ Apr√®s-midi : 14h00-18h00\n";
    response += "‚Ä¢ Samedi matin : 9h00-13h00\n\n";
    
    response += "üìã Informations n√©cessaires :\n";
    response += "‚Ä¢ Type d'intervention\n";
    response += "‚Ä¢ Adresse compl√®te\n";
    response += "‚Ä¢ Num√©ro de t√©l√©phone\n";
    response += "‚Ä¢ Cr√©neau pr√©f√©r√©\n\n";
    
    response += "‚ö° R√©servation imm√©diate :\n";
    response += "‚Ä¢ WhatsApp : confirmation instantan√©e\n";
    response += "‚Ä¢ T√©l√©phone : planning en temps r√©el\n\n";
    
    response += "üéÅ BONUS : Devis gratuit √† domicile !";
    
    return response;
}

function generateContextualResponse(userMessage, analysis) {
    const { services, intents } = analysis;
    
    // R√©ponse bas√©e sur le contexte de conversation
    if (conversationContext.stage === 'problem_diagnosis') {
        return "üîç Merci pour ces d√©tails suppl√©mentaires !\n\nPour un diagnostic complet et une solution rapide, nos techniciens DOMTECH peuvent intervenir aujourd'hui m√™me.\n\nüìû Contactez-nous maintenant pour programmer l'intervention !";
    }
    
    if (conversationContext.serviceInterest) {
        const service = domtechKnowledge.services[conversationContext.serviceInterest];
        return `Concernant votre projet ${service.name.toLowerCase()}, je peux vous aider avec :\n\n‚Ä¢ üí∞ Devis d√©taill√© gratuit\n‚Ä¢ üìÖ Planification intervention\n‚Ä¢ üîß Conseils techniques\n‚Ä¢ üö® D√©pannage urgent\n\nQue souhaitez-vous savoir exactement ?`;
    }
    
    // R√©ponse par d√©faut intelligente
    let response = "ü§î Je veux m'assurer de bien vous aider !\n\n";
    response += "üéØ DOMTECH peut vous accompagner sur :\n";
    response += "‚Ä¢ üí∞ Devis et tarifs\n‚Ä¢ üîß Conseils techniques\n‚Ä¢ üìÖ Prise de rendez-vous\n‚Ä¢ üö® Interventions urgentes\n‚Ä¢ üìç Zones d'intervention\n\n";
    response += "üí¨ Reformulez votre question ou choisissez un sujet !";
    
    return response;
}

function generateSmartFollowUp(analysis) {
    const { services, intents } = analysis;
    const leadLevel = leadScoringSystem.getLeadLevel();
    
    let questions = [];
    
    if (leadLevel === 'hot') {
        questions = [
            "Souhaitez-vous programmer une intervention ?",
            "Quel est votre budget pour ce projet ?",
            "Quand souhaitez-vous que nous intervenions ?"
        ];
    } else if (leadLevel === 'warm') {
        questions = [
            "Avez-vous d'autres questions sur nos services ?",
            "Souhaitez-vous un devis personnalis√© ?",
            "Dans quel quartier d'Abidjan √™tes-vous ?"
        ];
    } else {
        questions = [
            "Quel service DOMTECH vous int√©resse le plus ?",
            "Avez-vous un projet en cours ?",
            "Souhaitez-vous d√©couvrir nos r√©alisations ?"
        ];
    }
    
    return questions;
}

// Utilitaires
function getRandomResponse(responses) {
    return responses[Math.floor(Math.random() * responses.length)];
}

function isOutsideBusinessHours() {
    const now = new Date();
    const hour = now.getHours();
    const day = now.getDay();
    
    // Dimanche ou en dehors des heures d'ouverture
    return day === 0 || hour < 8 || hour >= 18 || (day === 6 && hour >= 13);
}

// Interface utilisateur am√©lior√©e avec M√âMOIRE
function toggleChatbot() {
    const chatbot = document.getElementById('chatbot');
    chatbotOpen = !chatbotOpen;
    chatbot.classList.toggle('active', chatbotOpen);
    
    if (chatbotOpen && conversationContext.conversationHistory.length === 0) {
        // Initialisation de la session avec m√©moire
        initializeClientSession();
    }
}

// Initialise une nouvelle session client avec m√©moire
function initializeClientSession() {
    // G√©n√©ration/r√©cup√©ration de l'ID client
    currentClientId = memorySystem.generateClientId();
    
    // Nettoyage des anciennes m√©moires
    memorySystem.cleanOldMemories();
    
    // R√©cup√©ration de la m√©moire client
    const clientMemory = memorySystem.getClientMemory(currentClientId);
    
    // Restauration du contexte si client existant
    if (clientMemory) {
        conversationContext.returningClient = true;
        const lastContext = memorySystem.getLastConversationContext(clientMemory);
        
        if (lastContext) {
            conversationContext.serviceInterest = lastContext.serviceInterest;
            conversationContext.leadScore = lastContext.leadScore;
            conversationContext.userInfo = lastContext.clientInfo || {};
            
            console.log(`üß† Contexte restaur√© pour client ${currentClientId}:`, lastContext);
        }
    }
    
    setTimeout(() => {
        let welcomeMsg;
        
        if (clientMemory) {
            // Message personnalis√© pour client existant
            welcomeMsg = memorySystem.generateWelcomeMessage(clientMemory);
            
            // Ajout d'informations contextuelles
            if (clientMemory.conversations.length > 0) {
                const lastConv = clientMemory.conversations[0];
                
                // Rappel du dernier sujet si r√©cent (moins de 7 jours)
                const daysSince = Math.floor((Date.now() - lastConv.timestamp) / (24 * 60 * 60 * 1000));
                if (daysSince < 7 && lastConv.keyTopics.length > 0) {
                    welcomeMsg += `\n\nüîç Sujets r√©cents : ${lastConv.keyTopics.slice(0, 3).join(', ')}`;
                }
                
                // Proposition de continuit√©
                if (lastConv.serviceInterest && lastConv.leadScore > 10) {
                    const serviceName = domtechKnowledge.services[lastConv.serviceInterest]?.name;
                    welcomeMsg += `\n\nüí° Souhaitez-vous continuer sur ${serviceName} ?`;
                }
            }
        } else {
            // Message standard pour nouveau client
            welcomeMsg = "üëã Bienvenue chez DOMTECH !\n\nü§ñ Je suis votre assistant IA personnel.\n\nüîß Je peux vous aider avec :\n‚Ä¢ Devis instantan√©s et personnalis√©s\n‚Ä¢ Diagnostic de pannes\n‚Ä¢ Conseils techniques d'expert\n‚Ä¢ Prise de rendez-vous\n‚Ä¢ Urgences 24/7\n\nüí¨ D√©crivez-moi votre projet ou votre probl√®me !";
        }
        
        addChatMessage(welcomeMsg, 'bot');
        
        // Affichage des statistiques de m√©moire en console
        if (clientMemory) {
            console.log(`üìä Statistiques client ${currentClientId}:`, {
                totalConversations: clientMemory.totalConversations,
                totalLeadScore: clientMemory.totalLeadScore,
                preferredServices: clientMemory.preferredServices,
                firstVisit: new Date(clientMemory.firstVisit).toLocaleDateString()
            });
        }
    }, 800);
}

function handleChatInput(event) {
    if (event.key === 'Enter') {
        const input = document.getElementById('chatbot-input');
        const message = input.value.trim();
        
        if (message) {
            addChatMessage(message, 'user');
            conversationContext.conversationHistory.push({
                type: 'user', 
                message, 
                timestamp: Date.now()
            });
            
            // Indicateur de traitement IA
            addAIProcessingIndicator();
            
            setTimeout(() => {
                removeAIProcessingIndicator();
                const analysis = analyzeMessage(message);
                const { response, actions, followUpQuestions } = generateIntelligentResponse(message, analysis);
                
                addChatMessage(response, 'bot', actions);
                
                // Ajout des questions de suivi
                if (followUpQuestions && followUpQuestions.length > 0) {
                    setTimeout(() => {
                        const followUpMsg = "ü§î Questions pour mieux vous aider :\n" + followUpQuestions.map((q, i) => `${i + 1}. ${q}`).join('\n');
                        addChatMessage(followUpMsg, 'bot');
                    }, 2000);
                }
                
                conversationContext.conversationHistory.push({
                    type: 'bot', 
                    message: response, 
                    timestamp: Date.now(),
                    analysis: analysis
                });
                
                // Sauvegarde automatique apr√®s chaque √©change
                autoSaveConversation();
                
            }, 2000);
            
            input.value = '';
        }
    }
}

// Sauvegarde automatique de la conversation
function autoSaveConversation() {
    if (currentClientId && conversationContext.conversationHistory.length > 0) {
        // Sauvegarde uniquement si la conversation a du contenu significatif
        const userMessages = conversationContext.conversationHistory.filter(msg => msg.type === 'user');
        if (userMessages.length >= 1) {
            memorySystem.saveConversation(currentClientId, conversationContext);
        }
    }
}

// Sauvegarde finale lors de la fermeture
function finalizeConversation() {
    if (currentClientId && conversationContext.conversationHistory.length > 0) {
        const success = memorySystem.saveConversation(currentClientId, conversationContext);
        if (success) {
            console.log(`üíæ Conversation finalis√©e et sauvegard√©e pour ${currentClientId}`);
        }
    }
}

function addChatMessage(message, sender, actions = []) {
    const messagesContainer = document.getElementById('chatbot-messages');
    const messageDiv = document.createElement('div');
    
    const isUser = sender === 'user';
    messageDiv.className = `mb-4 ${isUser ? 'ml-8' : 'mr-8'}`;
    
    const bubble = document.createElement('div');
    bubble.className = `p-4 rounded-2xl ${isUser ? 'bg-blue-500 text-white rounded-br-sm' : 'bg-white border border-gray-200 rounded-bl-sm shadow-sm'}`;
    
    // Formatage du message avec emojis et mise en forme
    const formattedMessage = message.replace(/\n/g, '<br>');
    bubble.innerHTML = formattedMessage;
    
    messageDiv.appendChild(bubble);
    
    // Ajout des boutons d'action
    if (actions.length > 0 && !isUser) {
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'mt-3 flex flex-wrap gap-2';
        
        actions.forEach(action => {
            const button = createActionButton(action);
            if (button) actionsDiv.appendChild(button);
        });
        
        messageDiv.appendChild(actionsDiv);
    }
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function createActionButton(action) {
    const button = document.createElement('button');
    button.className = 'px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 hover:scale-105';
    
    switch (action) {
        case 'whatsapp_button':
            button.textContent = 'üí¨ WhatsApp';
            button.className += ' bg-green-500 text-white hover:bg-green-600';
            button.onclick = () => window.open('https://wa.me/2250710367602?text=Bonjour%20DOMTECH,%20je%20viens%20du%20chat%20IA%20de%20votre%20site', '_blank');
            break;
        case 'urgent_whatsapp_button':
            button.textContent = 'üö® WhatsApp URGENT';
            button.className += ' bg-red-500 text-white hover:bg-red-600 animate-pulse';
            button.onclick = () => window.open('https://wa.me/2250710367602?text=üö®%20URGENCE%20-%20Besoin%20intervention%20imm√©diate', '_blank');
            break;
        case 'call_button':
            button.textContent = 'üìû Appeler';
            button.className += ' bg-blue-500 text-white hover:bg-blue-600';
            button.onclick = () => window.open('tel:+2250710367602');
            break;
        case 'urgent_call_button':
            button.textContent = 'üö® APPEL URGENT';
            button.className += ' bg-red-600 text-white hover:bg-red-700 animate-bounce';
            button.onclick = () => window.open('tel:+2250710367602');
            break;
        case 'calculator_button':
            button.textContent = 'üìä Calculateur';
            button.className += ' bg-purple-500 text-white hover:bg-purple-600';
            button.onclick = () => {
                toggleChatbot();
                document.querySelector('#service-type').scrollIntoView({behavior: 'smooth'});
            };
            break;
        case 'quote_button':
            button.textContent = 'üìã Devis Gratuit';
            button.className += ' bg-orange-500 text-white hover:bg-orange-600';
            button.onclick = () => {
                toggleChatbot();
                document.querySelector('#contact').scrollIntoView({behavior: 'smooth'});
            };
            break;
        default:
            return null;
    }
    
    return button;
}

function addAIProcessingIndicator() {
    const messagesContainer = document.getElementById('chatbot-messages');
    const processingDiv = document.createElement('div');
    processingDiv.id = 'ai-processing';
    processingDiv.className = 'mb-4 mr-8';
    
    const bubble = document.createElement('div');
    bubble.className = 'p-4 rounded-2xl bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-bl-sm';
    bubble.innerHTML = `
        <div class="flex items-center space-x-2">
            <div class="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            <span>ü§ñ IA DOMTECH analyse votre demande...</span>
        </div>
    `;
    
    processingDiv.appendChild(bubble);
    messagesContainer.appendChild(processingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function removeAIProcessingIndicator() {
    const processingIndicator = document.getElementById('ai-processing');
    if (processingIndicator) {
        processingIndicator.remove();
    }
}

// Fonction pour envoyer un message via le bouton
function sendMessage() {
    const input = document.getElementById('chatbot-input');
    const message = input.value.trim();
    
    if (message) {
        // Simuler l'appui sur Entr√©e
        const event = new KeyboardEvent('keypress', {
            key: 'Enter',
            code: 'Enter',
            which: 13,
            keyCode: 13,
        });
        handleChatInput(event);
    }
}

// Initialisation du chatbot IA avec M√âMOIRE PERSISTANTE
document.addEventListener('DOMContentLoaded', function() {
    console.log('ü§ñ Chatbot IA DOMTECH initialis√© avec succ√®s !');
    console.log('üìä Syst√®me de scoring des prospects activ√©');
    console.log('üß† Traitement du langage naturel op√©rationnel');
    console.log('üíæ Syst√®me de m√©moire persistante activ√©');
    console.log('üí° Fonctionnalit√©s IA disponibles :');
    console.log('   ‚Ä¢ Analyse s√©mantique des messages');
    console.log('   ‚Ä¢ D√©tection d\'intentions multiples');
    console.log('   ‚Ä¢ Scoring automatique des prospects');
    console.log('   ‚Ä¢ Diagnostic technique intelligent');
    console.log('   ‚Ä¢ R√©ponses contextuelles adaptatives');
    console.log('   ‚Ä¢ Gestion des urgences automatique');
    console.log('   ‚Ä¢ M√âMOIRE des conversations clients');
    console.log('   ‚Ä¢ Personnalisation selon l\'historique');
    
    // Nettoyage initial des anciennes m√©moires
    memorySystem.cleanOldMemories();
    
    // Affichage des statistiques de m√©moire
    const allMemories = memorySystem.getAllMemories();
    const clientCount = Object.keys(allMemories).length;
    const totalConversations = Object.values(allMemories).reduce((sum, client) => sum + client.totalConversations, 0);
    
    console.log(`üìà Statistiques m√©moire : ${clientCount} clients, ${totalConversations} conversations stock√©es`);
});

// Sauvegarde automatique lors de la fermeture du navigateur
window.addEventListener('beforeunload', function(e) {
    finalizeConversation();
});

// Sauvegarde automatique lors de la fermeture de l'onglet
window.addEventListener('unload', function(e) {
    finalizeConversation();
});

// Sauvegarde automatique lors de la perte de focus (changement d'onglet)
window.addEventListener('blur', function(e) {
    autoSaveConversation();
});

// Sauvegarde p√©riodique (toutes les 2 minutes)
setInterval(() => {
    autoSaveConversation();
}, 120000);

// Fonction pour afficher les statistiques de m√©moire (debug)
function showMemoryStats() {
    const memories = memorySystem.getAllMemories();
    console.log('üìä STATISTIQUES M√âMOIRE DOMTECH:', memories);
    
    for (let clientId in memories) {
        const client = memories[clientId];
        console.log(`üë§ Client ${clientId}:`, {
            conversations: client.totalConversations,
            leadScore: client.totalLeadScore,
            services: client.preferredServices,
            derni√®reVisite: new Date(client.conversations[0]?.timestamp).toLocaleString()
        });
    }
}

// Fonction pour nettoyer toutes les m√©moires (debug)
function clearAllMemories() {
    localStorage.removeItem('domtech_client_memories');
    localStorage.removeItem('domtech_client_id');
    console.log('üßπ Toutes les m√©moires ont √©t√© effac√©es');
}
